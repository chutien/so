diff -rupN old/usr/include/minix/callnr.h new/usr/include/minix/callnr.h
--- old/usr/include/minix/callnr.h	2018-05-07 17:39:29.671893393 +0200
+++ new/usr/include/minix/callnr.h	2018-05-07 16:49:48.705308083 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_PSTREE		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN old/usr/include/minix/ipc.h new/usr/include/minix/ipc.h
--- old/usr/include/minix/ipc.h	2018-05-07 17:39:29.695226829 +0200
+++ new/usr/include/minix/ipc.h	2018-05-07 16:49:48.701974736 +0200
@@ -1580,6 +1580,14 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_pm_lsys_sigs_signal);
 
 typedef struct {
+  pid_t pid;
+  int uid;
+
+  uint8_t padding[48];
+} mess_pm_pstree;
+_ASSERT_MSG_SIZE(mess_pm_pstree);
+
+typedef struct {
 	endpoint_t endpoint;
 	uint32_t maxprio;
 
@@ -2207,6 +2215,7 @@ typedef struct {
 		mess_pm_lsys_getepinfo	m_pm_lsys_getepinfo;
 		mess_pm_lsys_getprocnr	m_pm_lsys_getprocnr;
 		mess_pm_lsys_sigs_signal m_pm_lsys_sigs_signal;
+    mess_pm_pstree m_pm_pstree;
 		mess_pm_sched_scheduling_set_nice m_pm_sched_scheduling_set_nice;
 		mess_readclock_lc_rtcdev m_readclock_lc_rtcdev;
 		mess_rs_init		m_rs_init;
diff -rupN old/usr/include/unistd.h new/usr/include/unistd.h
--- old/usr/include/unistd.h	2018-05-07 17:39:29.685226785 +0200
+++ new/usr/include/unistd.h	2018-05-07 16:49:48.701974736 +0200
@@ -411,5 +411,7 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int pstree(pid_t, int);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupN old/usr/src/include/unistd.h new/usr/src/include/unistd.h
--- old/usr/src/include/unistd.h	2018-05-07 17:39:29.688560133 +0200
+++ new/usr/src/include/unistd.h	2018-05-07 16:49:48.701974736 +0200
@@ -411,5 +411,7 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int pstree(pid_t, int);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupN old/usr/src/lib/libc/misc/Makefile.inc new/usr/src/lib/libc/misc/Makefile.inc
--- old/usr/src/lib/libc/misc/Makefile.inc	2018-05-07 17:39:29.691893481 +0200
+++ new/usr/src/lib/libc/misc/Makefile.inc	2018-05-07 16:49:48.701974736 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c pstree.c
diff -rupN old/usr/src/lib/libc/misc/pstree.c new/usr/src/lib/libc/misc/pstree.c
--- old/usr/src/lib/libc/misc/pstree.c	1970-01-01 01:00:00.000000000 +0100
+++ new/usr/src/lib/libc/misc/pstree.c	2018-05-07 16:49:48.701974736 +0200
@@ -0,0 +1,9 @@
+#include <lib.h>
+#include <unistd.h>
+
+int pstree(pid_t pid, int uid) {
+  message m;
+  m.m_pm_pstree.pid = pid;
+  m.m_pm_pstree.uid = uid;
+  return _syscall(PM_PROC_NR, PM_PSTREE, &m);
+}
diff -rupN old/usr/src/minix/include/minix/callnr.h new/usr/src/minix/include/minix/callnr.h
--- old/usr/src/minix/include/minix/callnr.h	2018-05-07 17:39:29.668560045 +0200
+++ new/usr/src/minix/include/minix/callnr.h	2018-05-07 16:49:48.701974736 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_PSTREE		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN old/usr/src/minix/servers/pm/Makefile new/usr/src/minix/servers/pm/Makefile
--- old/usr/src/minix/servers/pm/Makefile	2018-05-07 17:39:29.681893437 +0200
+++ new/usr/src/minix/servers/pm/Makefile	2018-05-07 16:49:48.701974736 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c pstree.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupN old/usr/src/minix/servers/pm/proto.h new/usr/src/minix/servers/pm/proto.h
--- old/usr/src/minix/servers/pm/proto.h	2018-05-07 17:39:29.678560089 +0200
+++ new/usr/src/minix/servers/pm/proto.h	2018-05-07 16:49:48.701974736 +0200
@@ -89,3 +89,6 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* pstree.c */
+int do_pstree(void);
diff -rupN old/usr/src/minix/servers/pm/pstree.c new/usr/src/minix/servers/pm/pstree.c
--- old/usr/src/minix/servers/pm/pstree.c	1970-01-01 01:00:00.000000000 +0100
+++ new/usr/src/minix/servers/pm/pstree.c	2018-05-07 17:34:47.877286043 +0200
@@ -0,0 +1,67 @@
+#include <stdio.h>
+#include "pm.h"
+#include "mproc.h"
+
+/* Array stores relevant indices to mproc sorted by parent's realpid and realpid,
+   where relevant is when it meets conditions of is_child_ok. */
+static size_t mproc_index[NR_PROCS];
+
+static int is_child_ok(pid_t pid, int uid, int gid, size_t i) {
+  return (mproc[i].mp_flags & IN_USE)
+    && (mproc[mproc[i].mp_parent].mp_pid == pid)
+    && (mproc[i].mp_realuid == uid)
+    && (mproc[i].mp_realgid == gid)
+    && (mproc[mproc[i].mp_parent].mp_pid != mproc[i].mp_pid);
+}
+
+/* Returns number of children meeting conditions for pid, uid and gid
+   and puts indices of relevant children in order beginning at
+   the mproc_index[idx]. Insertion sort is used since mp_proc array
+   stores processes more or less in increasing order of pids. */
+static size_t insort_children(pid_t pid, int uid, int gid, size_t idx)
+{
+  size_t i, j;
+  size_t count = 0;
+  for (i = 0; i < NR_PROCS; ++i) {
+    if (!is_child_ok(pid, uid, gid, i))
+      continue;
+    for (j = idx + count++; j > idx && mproc[mproc_index[j - 1]].mp_pid > mproc[i].mp_pid; --j)
+      mproc_index[j] = mproc_index[j - 1];
+    mproc_index[j] = i;
+  }
+  return count;
+}
+
+static void do_pstree_children(pid_t pid, int uid, int gid, int idx, int generation)
+{
+  size_t i, j;
+  size_t count = insort_children(pid, uid, gid, idx);
+  pid_t child_pid;
+  for (i = idx; i < idx+count; ++i) {
+    for (j = 0; j < generation; ++j)
+      printf("---");
+    child_pid = mproc[mproc_index[i]].mp_pid;
+    printf("%d\n", child_pid);
+    do_pstree_children(child_pid, uid, gid, idx + count, generation + 1);
+  }
+  return;
+}
+
+int do_pstree(void)
+{
+  pid_t pid = m_in.m_pm_pstree.pid;
+  int uid = m_in.m_pm_pstree.uid;
+  gid_t gid = mproc[_ENDPOINT_P(m_in.m_source)].mp_realgid;
+  int i;
+  for (i = 0; i < NR_PROCS; ++i) {
+    if (mproc[i].mp_pid == pid
+        && (mproc[i].mp_flags & IN_USE)
+        && (mproc[i].mp_realuid == uid)
+        && (mproc[i].mp_realgid == gid)) {
+      printf("%d\n", pid);
+      do_pstree_children(pid, uid, gid, 0, 1);
+      break;
+    }
+  }
+  return OK;
+}
diff -rupN old/usr/src/minix/servers/pm/table.c new/usr/src/minix/servers/pm/table.c
--- old/usr/src/minix/servers/pm/table.c	2018-05-07 17:39:29.678560089 +0200
+++ new/usr/src/minix/servers/pm/table.c	2018-05-07 16:49:48.701974736 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+  CALL(PM_PSTREE) 	= do_pstree
 };
